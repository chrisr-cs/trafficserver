<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="121px" height="351px" viewBox="-0.5 -0.5 121 351" content="&lt;mxfile modified=&quot;2019-07-09T12:43:05.363Z&quot; host=&quot;www.draw.io&quot; agent=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36&quot; etag=&quot;ddiMkuCFAyaIljV02oMD&quot; version=&quot;10.9.1&quot; type=&quot;device&quot;&gt;&lt;diagram id=&quot;Yq-iRgQhyom4XtsFawwC&quot; name=&quot;Page-1&quot;&gt;xZVLT8MwDMc/TY+gtlmBHdl4CYRA2gE4odCaNlK6lDSjLZ8el7jvjZeEOC3+x3Hsn53OYcu0PNc8S65VBNLx3ah02Inj+x6bz/CnViqrHLHACrEWETl1wkq8AYkuqRsRQT5wNEpJI7KhGKr1GkIz0LjWqhi6PSs5vDXjMUyEVcjlVL0TkUmoCv+w0y9AxElzs3cwtzspb5ypkjzhkSp6Ejt12FIrZewqLZcga3gNF3vubMdum5iGtfnOgcf56vLGf3H3iqcgm9+pl8C/2qMor1xuqGBK1lQNgSIRBlYZD2u7wC47bJGYVKLl4ZLnmeX+LErAqxYUEbSBcmeqXgsAJwdUCkZX6EIHmEvMqoYq2UWvBSQlPfqNxqnpcRu544ILQvMDTP7XmGAdHdfzhlYoeZ6LEFnkhmszlXv4oBTmHtfufkDWQ2/npAbiNkZFhr0bosnkjvhifmqjQ/i6/5hmDOYTP7a9X71+BFv60WgaJDfidZjutibRDbdKYCHtOATBcBz82ajPtkw61X8Co0BsHMgbBbIcJoE+ZqYt+/djxL4xRlLipw2NxX+8u9mQDzv6s3eHZvfps3y7PxB2+g4=&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><rect x="0" y="0" width="80" height="80" fill="#ffffff" stroke="#000000" pointer-events="none"/><path d="M 46.86 86.3 L 73.2 264.13" fill="none" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 46.09 81.11 L 50.58 87.52 L 46.86 86.3 L 43.65 88.54 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><path d="M 73.97 269.33 L 69.49 262.91 L 73.2 264.13 L 76.41 261.89 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="none"/><ellipse cx="80" cy="310" rx="40" ry="40" fill="#ffffff" stroke="#000000" pointer-events="none"/></g></svg>

Apache Traffic Server

Traffic Server is a high-performance building block for cloud services.
It's more than just a caching proxy server; it also has support for
plugins to build large scale web applications.

1. DIRECTORY STRUCTURE

  traffic/ ............... top src dir
  |-- ci/ ................ quality assurance and other CI tools and configs
  |-- cmd/ ............... various command applications
      |-- traffic_cop/ ..
      |-- traffic_crashlog/
      |-- traffic_ctl/ ... traffic_ctl command line management application
      |-- traffic_layout/
      |-- traffic_manager/
      |-- traffic_top/ ... traffic_top application
      |-- traffic_via/ ...
      |-- traffic_wccp/ ..
  |-- contrib ............ various contributed auxiliary pieces
  |-- doc/ ...............
      |-- admin/ ......... Admin guide documentations
      |-- dot/ ........... Graphviz source files for docs pictures
      |-- man/ ........... Unix style man-pages
      |-- plugins/ ....... Documentation for our core plugins
      |-- sdk/ ........... Plugin developer guide
  |-- example/ ........... example plugins
  |-- install/ ........... installation programs and scripts
  |-- iocore/ ............
      |-- aio/ ........... Asynchronous I/O core
      |-- cache/ ......... Disk and RAM cache
      |-- dns/ ........... DNS (asynchronous)
      |-- hostdb/ ........ Internal DNS cache
      |-- net/ ........... Network
  |-- lib/ ...............
      |-- cppapi/ ........ C++ api wrapper for plugin developers
      |-- records/ ....... library for config files
      |-- perl/ .......... Perl libraries for e.g. mgmt access and configurations
      |-- ts/ ............ Base / core library
      |-- tsconfig/....... New config parser and library (experimental)
      |-- wccp/ .......... WCCP implementation
  |-- m4/ ................ custom macros for configure.ac
  |-- mgmt/ .............. Management server and tools (including traffic_manager)
  |-- plugins/ ........... Stable core plugins
      |-- experimental/ .. Experimental core plugins
  |-- proxy/ ............. HTTP proxy logic
      |-- api/ ........... Plugin API includes
      |-- config/ ........ Configurations
      |-- congest/ ....... Congestion control
      |-- hdrs/ .......... Headers parsing and management
      |-- http/ .......... The actual HTTP protocol implementation
      |---http2/ ......... HTTP/2 implementation
      |-- logging/ ....... Flexible logging
  |-- README ............. intro, links, build info
  |-- README-EC2 ......... info on EC2 support
  |-- REVIEWERS .......... (incomplete) list of areas with committer interest
  |-- LICENSE ............ full license text
  `-- NOTICE ............. copyright notices

2. REQUIREMENTS

  This section outlines build requirements for different OS
  distributions. This may be out of date compared to the on-line
  requirements at

  <https://cwiki.apache.org/confluence/display/TS/Building>.

  As of ATS v7.0.0 and later, gcc 4.8.1 or later is required, since we now use
  and require the C++11 standard.

  Fedora / CentOS / RHEL:
    autoconf
    automake
    libtool
    pkgconfig
    perl-ExtUtils-MakeMaker
    gcc/g++ or clang/clang++
    openssl-devel
    tcl-devel
    pcre-devel
    ncurses-devel and libcurl-devel(optional, needed for traffic_top)
    libcap-devel (optional, highly recommended)
    hwloc-devel (optional, highly recommended)
    flex (optional, needed for e.g. WCCP)

  Ubuntu / Debian
    autoconf
    automake
    libtool
    pkg-config
    libmodule-install-perl
    gcc/g++ or clang/clang++
    libssl-dev
    tcl-dev
    libpcre3-dev
    libcap-dev (optional, highly recommended)
    libhwloc-dev (optional, highly recommended)
    libncurses5-dev (optional, required for e.g.: traffic_top)
    libcurl4-openssl-dev (optional, required for e.g.: traffic_top)
    flex (optional, required for e.g. WCCP)

  Alpine Linux
    build-base
    libexecinfo-dev
    pcre-dev
    libressl-dev
    autoconf
    automake
    libtool
    tcl-dev
    linux-headers
  
  OSX (we recommend HomeBrew):
    autoconf
    automake
    pkgconfig
    libtool
    tcl
    openssl
    pcre

  FreeBSD
    devel/gmake
    devel/autoconf
    devel/automake
    devel/pkgconf
    devel/libtool
    lang/tcl85
    security/openssl
    devel/pcre
    textproc/flex (optional, install newer version from ports, fix PATH)
    devel/hwloc (optional, highly recommended)

  OmniOS:
    developer/gcc46
    developer/build/gnu-make
    developer/build/autoconf
    developer/build/automake-111
    developer/build/libtool
    omniti/runtime/tcl-8
    library/security/openssl
    library/pcre

3. Building from distribution

You can download the latest source code from the official Apache Traffic
Server site:

       http://trafficserver.apache.org/downloads

(or via the URL shortener: http://s.apache.org/uG). Once downloaded,
follow the instructions:

   tar xf trafficserver-2.1.8-unstable.tar.bz2
   cd trafficserver-2.1.8-unstable
  ./configure            # configure the build environment to create Makefiles
  make                   # execute the compile

This will build with a destination prefix of /usr/local. You can finish
the installation with

  sudo make install

4. BUILDING FROM GIT REPO

  mkdir -p ~/dev         # make yourself a development dir
  cd ~/dev               # enter your development dir
  git clone ...          # get the source code from ASF Git repository
  cd trafficserver       # enter the checkout directory
  autoreconf -if         # generate the configure script and Makefile.in files
  ./configure            # configure the build environment to create Makefiles
  make                   # execute the compile

4b. Instructions for building on EC2
    NOTE: Alternately you may use the scripts under 'contrib' which will
          automate the install for trafficserver under EC2 which is
          HIGHLY RECOMMENDED. See 'README-EC2' for further details.

   # As root do the following when using Ubuntu
   mkdir -p /mnt          #EC2 Storage Mount, where storage is located
   cd /mnt
   git clone ...          # get the source code from ASF Git repo
   cd trafficserver       # enter the checkout dir
   autoreconf -i --force  # generate the configure script and Makefile.in files
   ./configure
   make

   # As root do the following when using Fedora Core 8 kernel
   mkdir -p /mnt          #EC2 Storage Mount, where storage is located
   cd /mnt
   git clone ...          # get the source code from ASF Git repo
   cd trafficserver       # enter the checkout dir
   autoreconf -i --force  # generate the configure script and Makefile.in files
   ./configure --disable-eventfd
   make

4c. Instructions for building on FreeBSD

   The only difference is how to run configure and make:

   MAKE=gmake ./configure # make sure that gmake is the make we use
   gmake

5. INSTALLATION

  DEFAULT DIR                        CONTENTS
  /usr/local/var/log/trafficserver   log files created at runtime
  /usr/local/var/trafficserver       runtime files
  /usr/local/etc/trafficserver       configuration files
  /usr/local/bin                     executable binaries
  /usr/local/libexec/trafficserver   plugins

6. CRYPTO NOTICE

  This distribution includes cryptographic software.  The country in
  which you currently reside may have restrictions on the import,
  possession, use, and/or re-export to another country, of
  encryption software.  BEFORE using any encryption software, please
  check your country's laws, regulations and policies concerning the
  import, possession, or use, and re-export of encryption software, to
  see if this is permitted.  See <http://www.wassenaar.org/> for more
  information.

  The U.S. Government Department of Commerce, Bureau of Industry and
  Security (BIS), has classified this software as Export Commodity
  Control Number (ECCN) 5D002.C.1, which includes information security
  software using or performing cryptographic functions with asymmetric
  algorithms.  The form and manner of this Apache Software Foundation
  distribution makes it eligible for export under the License Exception
  ENC Technology Software Unrestricted (TSU) exception (see the BIS
  Export Administration Regulations, Section 740.13) for both object
  code and source code.

  The following provides more details on the included cryptographic
  software:

    The functionality of OpenSSL <http://www.openssl.org/> is
    utilized in parts of the software.

7. ADDITIONAL INFO

  Web page: https://trafficserver.apache.org/
  Wiki: http://cwiki.apache.org/confluence/display/TS/
  User mailing list: users@trafficserver.apache.org
